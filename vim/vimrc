call plug#begin('~/.vim/plugged')

Plug 'morhetz/gruvbox'

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'bling/vim-airline'
Plug 'ap/vim-buftabline'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'unblevable/quick-scope'

Plug 'xolox/vim-misc'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
if !has('nvim')
  Plug 'scrooloose/syntastic'
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
endif

if has('nvim')
  Plug 'benekastah/neomake'
  Plug 'Shougo/deoplete.nvim'
endif
Plug 'bronson/vim-trailing-whitespace'

Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-bundler'
Plug 'thoughtbot/vim-rspec'

Plug 'mfukar/robotframework-vim'
Plug 'slim-template/vim-slim'
Plug 'kchmck/vim-coffee-script'
Plug 'pangloss/vim-javascript'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
Plug 'fatih/vim-go'

call plug#end()

if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Colorscheme
"set t_ut=
set background=dark
colorscheme gruvbox

set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab
set lazyredraw

set nrformats-=octal

"set ttimeout
"set ttimeoutlen=100

set incsearch

set laststatus=2
set ruler
set showcmd
set wildmenu

set display+=lastline

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

set relativenumber
set number

set undofile
set undodir=~/.vim/undodir//
set history=1000
set backupdir=~/.vim/backupdir//
set directory=~/.vim/swapfiles//

set ts=2
set shiftwidth=2
set expandtab
set showmatch
set ignorecase
set hlsearch

set wildmode=list:longest,full

set scrolljump=5
set linebreak

set scrolloff=8
set sidescrolloff=15
set sidescroll=1

set encoding=utf-8
set fileencoding=utf-8

" Map leader key to space
noremap <Space> <NOP>
let mapleader = " "

" Change buffer
set hidden
nnoremap ä :bnext<CR>
nnoremap ö :bprev<CR>

nnoremap <C-p> :Files<CR>

" Switch lines
map Ö :m .+1<CR>==
map Ä :m .-2<CR>==

" Disable Shift-k
nnoremap K <NOP>

" CTRL+Arrows to resize splits
nnoremap <C-left> :vertical resize -5<cr>
nnoremap <C-down> :resize +5<cr>
nnoremap <C-up> :resize -5<cr>
nnoremap <C-right> :vertical resize +5<cr>

" F4 to remove trailing whitespace
nnoremap <silent> <F4> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

command WQ wq
command Wq wq
command W w
command Q q

" Go to tag under cursor
noremap <leader>g <C-]>
" Show tags available for word under cursor
noremap <leader>f g]

let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"

" make YCM compatible with UltiSnips
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" Rspec
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Search buffers
map <Leader>b :Buffers<cr>

" Highlight column 80
set colorcolumn=80

" Gitgutter
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

if has('nvim')
  autocmd! BufWritePost * Neomake
  let g:deoplete#enable_at_startup = 1
endif

if !has('nvim')
  " Syntastic options
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 1
  "let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0

  let g:syntastic_ruby_checkers=['rubocop', 'mri']
endif

